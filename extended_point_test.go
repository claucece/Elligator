package ed448

import (
	"encoding/hex"

	. "gopkg.in/check.v1"
)

func (s *Ed448Suite) Test_IsValidPoint(c *C) {
	p := &twExtendedPoint{
		&bigNumber{
			0x034365c8, 0x06b2a874,
			0x0eb875d7, 0x0ae4c7a7,
			0x0785df04, 0x09929351,
			0x01fe8c3b, 0x0f2a0e5f,
			0x0111d39c, 0x07ab52ba,
			0x01df4552, 0x01d87566,
			0x0f297be2, 0x027c090f,
			0x0a81b155, 0x0d1a562b,
		},
		&bigNumber{
			0x00da9708, 0x0e7d583e,
			0x0dbcc099, 0x0d2dad89,
			0x05a49ce4, 0x01cb4ddc,
			0x0928d395, 0x0098d91d,
			0x0bff16ce, 0x06f02f9a,
			0x0ce27cc1, 0x0dab5783,
			0x0b553d94, 0x03251a0c,
			0x064d70fb, 0x07fe3a2f,
		},
		&bigNumber{
			0x0d5237cc, 0x0319d105,
			0x02ab2df5, 0x022e9736,
			0x0d79742f, 0x00688712,
			0x012d3a65, 0x0ef4925e,
			0x0bd0d260, 0x0832b532,
			0x05faef27, 0x01ffe567,
			0x0161ce73, 0x07bda0f5,
			0x035d04f1, 0x0930f532,
		},

		&bigNumber{
			0x01f6cc27, 0x09be7b8a,
			0x0226da79, 0x0f6202f1,
			0x0e7264dc, 0x0d25aeb1,
			0x06c81f07, 0x03c32cdc,
			0x0923c854, 0x0cfc9865,
			0x055b2fed, 0x05bdcc90,
			0x01a99835, 0x0ea08056,
			0x0abbf763, 0x03826c2f,
		},
	}

	//non-valid point
	q := &twExtendedPoint{
		&bigNumber{
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
		},
		&bigNumber{
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
		},
		&bigNumber{
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
		},
		&bigNumber{
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
		},
	}
	c.Assert(p.isValidPoint(), Equals, true)
	c.Assert(q.isValidPoint(), Equals, false)
}

func (s *Ed448Suite) Test_PointEquality(c *C) {
	p := &twExtendedPoint{
		&bigNumber{
			0x0e0fbf9e, 0x0ba1bcd7,
			0x01cc6d39, 0x053b56e8,
			0x0635d142, 0x0383307a,
			0x0f8a159b, 0x097fd2cf,
			0x0fa310f6, 0x05522bde,
			0x0b981703, 0x0b095b1e,
			0x042d4780, 0x05ae11df,
			0x0934fe80, 0x0dc6474d},
		&bigNumber{
			0x02c1149c, 0x0e72febf,
			0x05259893, 0x0723e184,
			0x0f7232ff, 0x019a5600,
			0x05581d2c, 0x07331444,
			0x04e0124a, 0x09c3c5e5,
			0x0945536e, 0x0b786a20,
			0x0f75623f, 0x00ba30e8,
			0x0cc589a3, 0x04a2eea8},
		&bigNumber{
			0x02406c71, 0x0b2fdb67,
			0x02591aa2, 0x085fc24e,
			0x0dc50d09, 0x08692c5b,
			0x0ba917d7, 0x0aefea74,
			0x037d0084, 0x04d5defa,
			0x08bbe7ad, 0x050da977,
			0x08adf827, 0x05425cdd,
			0x037d816d, 0x0d59cd0a},
		&bigNumber{
			0x0baf8c30, 0x06686ad3,
			0x0c149bac, 0x0f57f68d,
			0x05cd321a, 0x02ff8d60,
			0x09dcc4bd, 0x0f731ec2,
			0x0cd7ea75, 0x0be970e4,
			0x043d30e0, 0x0dd64b9b,
			0x04f78bf1, 0x0d1fde20,
			0x05c88e97, 0x026ce314},
	}

	q := &twExtendedPoint{
		&bigNumber{
			0x06172a44, 0x0731d576,
			0x0da247e0, 0x0d9fd318,
			0x072d1c77, 0x073e77aa,
			0x09a004b5, 0x012507b9,
			0x09a684c3, 0x08b559f8,
			0x0d445c85, 0x07941c89,
			0x0c942cd4, 0x02bcfe3e,
			0x022ccaaa, 0x0be3a6b3},
		&bigNumber{
			0x03294fb1, 0x0e4336b5,
			0x0fe125d6, 0x08c09f34,
			0x0f04e3ce, 0x0eac940d,
			0x09c38a23, 0x0a2ec035,
			0x06545488, 0x0355e18f,
			0x0522a0ec, 0x0ce0fd60,
			0x0bd3a6ce, 0x03fe9d85,
			0x06e5c4f3, 0x018cf1e5},
		&bigNumber{
			0x0e957107, 0x0f672aa2,
			0x049b0276, 0x07a7ecf2,
			0x0e9a1c69, 0x04067d01,
			0x03f2ddee, 0x0ffebccb,
			0x0d58b6cf, 0x0d95fb9c,
			0x077d5935, 0x078ddbc3,
			0x085093f2, 0x03015d2f,
			0x019d8e0a, 0x0388a2ac},
		&bigNumber{
			0x0bf26ccb, 0x0b930dcd,
			0x0e207a77, 0x0d8fdde5,
			0x04e2452b, 0x099e9922,
			0x0ec0b62c, 0x04f9d73b,
			0x03811a2a, 0x0871aefb,
			0x00f5e028, 0x0b6aa04c,
			0x0226cb55, 0x0b6e4ee0,
			0x0f3eba42, 0x04409402},
	}

	c.Assert(p.equals(p), Equals, decafTrue)
	c.Assert(p.equals(q), Equals, decafFalse)
}

func (s *Ed448Suite) Test_PointAdd(c *C) {

	p := &twExtendedPoint{
		&bigNumber{},
		&bigNumber{},
		&bigNumber{},
		&bigNumber{},
	}

	q := &twExtendedPoint{
		&bigNumber{
			0x0a7f964a, 0x0db033f8,
			0x062b9f0b, 0x07bff7d6,
			0x05e755a2, 0x013b6f8b,
			0x0f080bdc, 0x0a112ac0,
			0x0416988a, 0x03404b2f,
			0x00561ea3, 0x01df752c,
			0x070e0b1c, 0x0e73a0c4,
			0x078245d5, 0x09a42df0,
		},
		&bigNumber{
			0x0c2e6c3d, 0x0a03c3f2,
			0x0fd16e97, 0x0bab4ec6,
			0x08ddba78, 0x091638ef,
			0x0b0add85, 0x070c212d,
			0x04bcd337, 0x0c828579,
			0x0712cfff, 0x09c1534a,
			0x0119cafe, 0x08e72ee0,
			0x0f14ff19, 0x0d0c7e25,
		},
		&bigNumber{
			0x0a0d6be1, 0x0bcd9788,
			0x00f9ca8a, 0x038cf839,
			0x00912da2, 0x0a3c503a,
			0x056fe7e0, 0x03db9a49,
			0x0f19d062, 0x052ac631,
			0x01cbda35, 0x02967214,
			0x0eed2db2, 0x0a948ce0,
			0x05f7a3a7, 0x0fa35bc2,
		},
		&bigNumber{
			0x0fc9f32d, 0x0e442931,
			0x065e50ff, 0x04be230d,
			0x0dc923c2, 0x0000467c,
			0x08fc8902, 0x0e034cfb,
			0x0126370c, 0x06ec706d,
			0x06ff07ad, 0x0a27cd65,
			0x060f214f, 0x0eb7756d,
			0x0b694dc7, 0x015705ad,
		},
	}

	r := &twExtendedPoint{
		&bigNumber{
			0x075ee82f, 0x0078024b,
			0x0a72cc37, 0x07b7b942,
			0x01dc37cd, 0x05b2ca96,
			0x0fa5deaf, 0x071020de,
			0x09122cbe, 0x01bdbe1d,
			0x0eeb69f3, 0x073d88cf,
			0x0777b71a, 0x0aa1660a,
			0x0c4476bf, 0x08e2cf30,
		},
		&bigNumber{
			0x0aab8840, 0x0f0932b3,
			0x0088be9e, 0x0c4d55d6,
			0x01926f40, 0x01c112e0,
			0x0884dc6d, 0x0e66b50b,
			0x09120ee4, 0x0750ee39,
			0x048c6ce2, 0x00f9fe35,
			0x0f74988e, 0x05693a13,
			0x0c1d267c, 0x052d5ba0,
		},
		&bigNumber{
			0x043efd14, 0x07ce59a0,
			0x0f9b7154, 0x05663cbd,
			0x055ba08f, 0x0525f2b7,
			0x0e1d908d, 0x06d7d26a,
			0x0c4cee28, 0x02039ee7,
			0x0a733b28, 0x01be5db0,
			0x056e9a37, 0x0db1b9b6,
			0x088880cd, 0x03d26863,
		},
		&bigNumber{
			0x0b3765ab, 0x0ed3e150,
			0x02134041, 0x0ec8f519,
			0x0acb91c3, 0x0f916fd5,
			0x099a9e35, 0x0e44da01,
			0x0c16e971, 0x0c1b213b,
			0x0e824448, 0x0b197385,
			0x07988fd4, 0x0ab877a6,
			0x0d658e39, 0x0cf66684,
		},
	}

	exp := &twExtendedPoint{
		&bigNumber{
			0x0d6a2637, 0x0cee14c7,
			0x0b626f81, 0x02a8151b,
			0x01d9b4a2, 0x00c23d77,
			0x0859f8bc, 0x0e02e853,
			0x0314bf95, 0x04447761,
			0x09fb76bd, 0x0dd35230,
			0x03b3f440, 0x017dc316,
			0x09bf7799, 0x054f1cc4,
		},
		&bigNumber{
			0x021dd329, 0x019d887a,
			0x0029b32a, 0x06a01e7d,
			0x06081030, 0x036080a2,
			0x05c8240b, 0x0c11a3bc,
			0x00a2ecfe, 0x045ecf89,
			0x08e0d084, 0x06f80067,
			0x0b9d1318, 0x0b8bfeb3,
			0x07487524, 0x04e1609a,
		},
		&bigNumber{
			0x067eb923, 0x0d7bbefe,
			0x0cf769ff, 0x05725ec8,
			0x0c23c0ad, 0x091bcba2,
			0x0de48aec, 0x02c71185,
			0x0e607ca2, 0x042ba874,
			0x08a195fa, 0x04386d91,
			0x079778f4, 0x045ecac6,
			0x02c493ab, 0x050614a7,
		},
		&bigNumber{
			0x0f69cb7d, 0x0b9c1d3c,
			0x087a352c, 0x06c4b483,
			0x025fb591, 0x0bf2bd90,
			0x08f3ffa4, 0x008659f1,
			0x062cc1fd, 0x0892fc5b,
			0x05f37db7, 0x017d17a8,
			0x01b92f20, 0x088ba2bd,
			0x00e3ed5f, 0x0230bb39,
		},
	}

	p.add(q, r)
	c.Assert(p, DeepEquals, exp)

	a := p.copy()
	a.add(q, r)
	b := p.copy()
	b.add(r, q)

	//commute
	c.Assert(a, DeepEquals, b)
}

func (s *Ed448Suite) Test_PointSub(c *C) {

	p := &twExtendedPoint{
		&bigNumber{},
		&bigNumber{},
		&bigNumber{},
		&bigNumber{},
	}

	q := &twExtendedPoint{
		&bigNumber{
			0x0a7f964a, 0x0db033f8,
			0x062b9f0b, 0x07bff7d6,
			0x05e755a2, 0x013b6f8b,
			0x0f080bdc, 0x0a112ac0,
			0x0416988a, 0x03404b2f,
			0x00561ea3, 0x01df752c,
			0x070e0b1c, 0x0e73a0c4,
			0x078245d5, 0x09a42df0,
		},
		&bigNumber{
			0x0c2e6c3d, 0x0a03c3f2,
			0x0fd16e97, 0x0bab4ec6,
			0x08ddba78, 0x091638ef,
			0x0b0add85, 0x070c212d,
			0x04bcd337, 0x0c828579,
			0x0712cfff, 0x09c1534a,
			0x0119cafe, 0x08e72ee0,
			0x0f14ff19, 0x0d0c7e25,
		},
		&bigNumber{
			0x0a0d6be1, 0x0bcd9788,
			0x00f9ca8a, 0x038cf839,
			0x00912da2, 0x0a3c503a,
			0x056fe7e0, 0x03db9a49,
			0x0f19d062, 0x052ac631,
			0x01cbda35, 0x02967214,
			0x0eed2db2, 0x0a948ce0,
			0x05f7a3a7, 0x0fa35bc2,
		},
		&bigNumber{
			0x0fc9f32d, 0x0e442931,
			0x065e50ff, 0x04be230d,
			0x0dc923c2, 0x0000467c,
			0x08fc8902, 0x0e034cfb,
			0x0126370c, 0x06ec706d,
			0x06ff07ad, 0x0a27cd65,
			0x060f214f, 0x0eb7756d,
			0x0b694dc7, 0x015705ad,
		},
	}

	r := &twExtendedPoint{
		&bigNumber{
			0x075ee82f, 0x0078024b,
			0x0a72cc37, 0x07b7b942,
			0x01dc37cd, 0x05b2ca96,
			0x0fa5deaf, 0x071020de,
			0x09122cbe, 0x01bdbe1d,
			0x0eeb69f3, 0x073d88cf,
			0x0777b71a, 0x0aa1660a,
			0x0c4476bf, 0x08e2cf30,
		},
		&bigNumber{
			0x0aab8840, 0x0f0932b3,
			0x0088be9e, 0x0c4d55d6,
			0x01926f40, 0x01c112e0,
			0x0884dc6d, 0x0e66b50b,
			0x09120ee4, 0x0750ee39,
			0x048c6ce2, 0x00f9fe35,
			0x0f74988e, 0x05693a13,
			0x0c1d267c, 0x052d5ba0,
		},
		&bigNumber{
			0x043efd14, 0x07ce59a0,
			0x0f9b7154, 0x05663cbd,
			0x055ba08f, 0x0525f2b7,
			0x0e1d908d, 0x06d7d26a,
			0x0c4cee28, 0x02039ee7,
			0x0a733b28, 0x01be5db0,
			0x056e9a37, 0x0db1b9b6,
			0x088880cd, 0x03d26863,
		},
		&bigNumber{
			0x0b3765ab, 0x0ed3e150,
			0x02134041, 0x0ec8f519,
			0x0acb91c3, 0x0f916fd5,
			0x099a9e35, 0x0e44da01,
			0x0c16e971, 0x0c1b213b,
			0x0e824448, 0x0b197385,
			0x07988fd4, 0x0ab877a6,
			0x0d658e39, 0x0cf66684,
		},
	}

	exp := &twExtendedPoint{
		&bigNumber{
			0x0e264012, 0x0c218ff9,
			0x06393c0f, 0x0864e62d,
			0x05f0e534, 0x0267756d,
			0x0ce40403, 0x0e9e240d,
			0x09597584, 0x027844b2,
			0x0f8842bf, 0x01b5f03d,
			0x05fbfd9a, 0x0e4ed5e3,
			0x07087964, 0x07dc52d0,
		},

		&bigNumber{
			0x05484245, 0x0f3c416d,
			0x083a1e46, 0x05e6a9d8,
			0x05bfedad, 0x0a9a7379,
			0x00b489c3, 0x0de89d6b,
			0x04e7709d, 0x0149bd11,
			0x017eb71a, 0x0223de4a,
			0x00d9bd0d, 0x093c76a6,
			0x072fe435, 0x0d6fd2c5,
		},
		&bigNumber{
			0x067eb923, 0x0d7bbefe,
			0x0cf769ff, 0x05725ec8,
			0x0c23c0ad, 0x091bcba2,
			0x0de48aec, 0x02c71185,
			0x0e607ca2, 0x042ba874,
			0x08a195fa, 0x04386d91,
			0x079778f4, 0x045ecac6,
			0x02c493ab, 0x050614a7,
		},
		&bigNumber{
			0x0455a73b, 0x0cfbe5f2,
			0x0cdb56a2, 0x06477b21,
			0x0fda6909, 0x07f6faeb,
			0x04ebea8b, 0x0d1e04b7,
			0x00307c2a, 0x0e926e5c,
			0x0efdf04c, 0x038841bb,
			0x09be04e8, 0x001137e1,
			0x0515b17d, 0x0ea27de2,
		},
	}

	p.sub(q, r)
	c.Assert(p, DeepEquals, exp)
}

func (s *Ed448Suite) Test_PointDouble(c *C) {
	p := &twExtendedPoint{
		&bigNumber{
			0x08354b7a, 0x0895b3e8,
			0x06ae5175, 0x0644b394,
			0x0b7faf9e, 0x0c5237db,
			0x013a0c90, 0x08f5bce0,
			0x09a3d79b, 0x00f17559,
			0x0de8f041, 0x073e222f,
			0x0dc2b7ee, 0x005ac354,
			0x0766db38, 0x065631fe},
		&bigNumber{
			0x00398885, 0x055c9bed,
			0x0ae443ca, 0x0fd70ea4,
			0x09e2a7d2, 0x04ac2e9d,
			0x00678287, 0x0294768e,
			0x0b604cea, 0x07b49317,
			0x0dc2a6d9, 0x0e44a6fb,
			0x09db3965, 0x049d3bf5,
			0x03e655fe, 0x003a9c02},
		&bigNumber{
			0x0fd57162, 0x0a39f768,
			0x03009756, 0x065d735f,
			0x0d1da282, 0x0589ecd7,
			0x003196b1, 0x0c001dfe,
			0x019f1050, 0x0152e8d2,
			0x0c14ff38, 0x00f7a446,
			0x028053f6, 0x0f8a91e9,
			0x05a8d694, 0x09d5ae86},
		&bigNumber{
			0x04198f2e, 0x0d82440f,
			0x0fce100e, 0x0af4829d,
			0x0d5c3516, 0x0094a0da,
			0x078cdb39, 0x0e738836,
			0x01ec536d, 0x06dfd1e9,
			0x0ee16173, 0x0addc8c0,
			0x0797fb1d, 0x059741a3,
			0x0a7f9c34, 0x088fe0a6},
	}

	p.double(false)

	exp := &twExtendedPoint{
		&bigNumber{
			0x00d8f04c, 0x03e54689,
			0x0eb4db2b, 0x0887ba34,
			0x0a5b4ebc, 0x0f6c0261,
			0x03bfa803, 0x0408ff02,
			0x03b4ef26, 0x0465c028,
			0x0cd47378, 0x064c55b4,
			0x08245850, 0x01912682,
			0x0dcbf92c, 0x07a7fa30},
		&bigNumber{
			0x0d94d1a6, 0x0f7306e8,
			0x0278b336, 0x04362b7b,
			0x0faf02b9, 0x06b01d18,
			0x07a597da, 0x0bd6add0,
			0x047afa98, 0x0e64e897,
			0x0bbf88e6, 0x01d0a534,
			0x04a52b9d, 0x0af374e0,
			0x05091d54, 0x00fcf1a5},
		&bigNumber{
			0x042318ce, 0x04aecdae,
			0x0e8f196b, 0x0019d2e3,
			0x045d147c, 0x060b153e,
			0x0adf2c37, 0x0419cdd8,
			0x06d19046, 0x00d18821,
			0x06c7b9c2, 0x0c0ffd68,
			0x0b7e4ca2, 0x06da0d56,
			0x0952b40f, 0x03008395},
		&bigNumber{
			0x04643593, 0x000e0fdd,
			0x013f29f3, 0x0bb8992d,
			0x0a30d344, 0x09151eec,
			0x0d12bb82, 0x05c7a054,
			0x0103c2c6, 0x08a61fe2,
			0x0aced4bf, 0x0f76d481,
			0x0db774be, 0x065ef8a8,
			0x0ff47a71, 0x0f49f73e}}

	c.Assert(p, DeepEquals, exp)

	q := &twExtendedPoint{
		&bigNumber{0x1},
		&bigNumber{0x2},
		&bigNumber{0x3},
		&bigNumber{0x4},
	}

	q.double(true)

	exp = &twExtendedPoint{
		&bigNumber{
			0x0000003b, 0x10000000,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0ffffffe, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff},
		&bigNumber{
			0x0000000e, 0x00000000,
			0x00000000, 0x00000000,
			0x00000000, 0x00000000,
			0x00000000, 0x00000000,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff},
		&bigNumber{
			0x0000002c, 0x10000000,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0ffffffe, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff},
		&bigNumber{
			0x00000002, 0x10000000,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0ffffffe, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff}}

	c.Assert(q, DeepEquals, exp)
}

func (s *Ed448Suite) Test_DecafEncode(c *C) {
	p := &twExtendedPoint{
		&bigNumber{
			0x0d9a309b, 0x000289cb,
			0x02d19f65, 0x0b622ac4,
			0x05e6807f, 0x0a08b7f8,
			0x0a2a124a, 0x00be3938,
			0x08475ec5, 0x00682935,
			0x0ab32a89, 0x08377f34,
			0x075f359d, 0x0f12f2dc,
			0x08d30bbc, 0x04c9b187,
		},
		&bigNumber{
			0x0627d6a6, 0x0d4bd92c,
			0x0a91b860, 0x0209d8f9,
			0x0acef183, 0x038a181b,
			0x01a80ca4, 0x036550a0,
			0x0810b32f, 0x0697d168,
			0x01832b57, 0x0a92e97a,
			0x0c59385b, 0x085ebf7e,
			0x035e4c9b, 0x01d4a5ce,
		},
		&bigNumber{
			0x02c059ed, 0x0a48a55e,
			0x0c8728bd, 0x09bf85c1,
			0x0d10487f, 0x0dad01c8,
			0x0ec8b362, 0x067d381b,
			0x0bd55d03, 0x0fa6172f,
			0x0da14dd1, 0x00bd1e8d,
			0x0d7d1137, 0x073a3e0c,
			0x0418d0cb, 0x0eaeb008,
		},
		&bigNumber{
			0x0ce390f7, 0x00deca5e,
			0x02f49eb1, 0x0f1bdd2b,
			0x0440bb6a, 0x04a99c96,
			0x086d3a76, 0x035d2358,
			0x0f89d14b, 0x0ccb0445,
			0x0dfbf181, 0x05c26d7b,
			0x09185fba, 0x0dc1a6e0,
			0x04f24b49, 0x0b419134,
		},
	}

	b, _ := hex.DecodeString("e4b2a1a14395b5eb3a5c3f3d265782efc28b9a94cc1d46fff8725079cee988d0955a3da9a2ef30abc30ef1bd947f48e093aad8405db1d268")

	dst := [fieldBytes]byte{}

	p.decafEncode(dst[:])

	c.Assert(dst[:], DeepEquals, b)
}

func (s *Ed448Suite) Test_DecafDecode(c *C) {
	p := &twExtendedPoint{
		x: &bigNumber{},
		y: &bigNumber{},
		z: &bigNumber{},
		t: &bigNumber{},
	}

	ok := decafDecode(p, serialized{
		0xe4, 0xb2, 0xa1, 0xa1, 0x43, 0x95, 0xb5,
		0xeb, 0x3a, 0x5c, 0x3f, 0x3d, 0x26, 0x57,
		0x82, 0xef, 0xc2, 0x8b, 0x9a, 0x94, 0xcc,
		0x1d, 0x46, 0xff, 0xf8, 0x72, 0x50, 0x79,
		0xce, 0xe9, 0x88, 0xd0, 0x95, 0x5a, 0x3d,
		0xa9, 0xa2, 0xef, 0x30, 0xab, 0xc3, 0x0e,
		0xf1, 0xbd, 0x94, 0x7f, 0x48, 0xe0, 0x93,
		0xaa, 0xd8, 0x40, 0x5d, 0xb1, 0xd2, 0x68,
	}, false)

	c.Assert(p.x, DeepEquals, &bigNumber{
		0x034365c8, 0x06b2a874,
		0x0eb875d7, 0x0ae4c7a7,
		0x0785df04, 0x09929351,
		0x01fe8c3b, 0x0f2a0e5f,
		0x0111d39c, 0x07ab52ba,
		0x01df4552, 0x01d87566,
		0x0f297be2, 0x027c090f,
		0x0a81b155, 0x0d1a562b,
	})
	c.Assert(p.y, DeepEquals, &bigNumber{
		0x00da9708, 0x0e7d583e,
		0x0dbcc099, 0x0d2dad89,
		0x05a49ce4, 0x01cb4ddc,
		0x0928d395, 0x0098d91d,
		0x0bff16ce, 0x06f02f9a,
		0x0ce27cc1, 0x0dab5783,
		0x0b553d94, 0x03251a0c,
		0x064d70fb, 0x07fe3a2f,
	})
	c.Assert(p.z, DeepEquals, &bigNumber{
		0x0d5237cc, 0x0319d105,
		0x02ab2df5, 0x022e9736,
		0x0d79742f, 0x00688712,
		0x012d3a65, 0x0ef4925e,
		0x0bd0d260, 0x0832b532,
		0x05faef27, 0x01ffe567,
		0x0161ce73, 0x07bda0f5,
		0x035d04f1, 0x0930f532,
	})
	c.Assert(p.t, DeepEquals, &bigNumber{
		0x01f6cc27, 0x09be7b8a,
		0x0226da79, 0x0f6202f1,
		0x0e7264dc, 0x0d25aeb1,
		0x06c81f07, 0x03c32cdc,
		0x0923c854, 0x0cfc9865,
		0x055b2fed, 0x05bdcc90,
		0x01a99835, 0x0ea08056,
		0x0abbf763, 0x03826c2f,
	})
	c.Assert(ok, Equals, word(lmask))

	//allow identity
	q := &twExtendedPoint{
		x: &bigNumber{},
		y: &bigNumber{},
		z: &bigNumber{},
		t: &bigNumber{},
	}

	ok = decafDecode(q, serialized{
		0xe4, 0xb2, 0xa1, 0xa1, 0x43, 0x95, 0xb5,
		0xeb, 0x3a, 0x5c, 0x3f, 0x3d, 0x26, 0x57,
		0x82, 0xef, 0xc2, 0x8b, 0x9a, 0x94, 0xcc,
		0x1d, 0x46, 0xff, 0xf8, 0x72, 0x50, 0x79,
		0xce, 0xe9, 0x88, 0xd0, 0x95, 0x5a, 0x3d,
		0xa9, 0xa2, 0xef, 0x30, 0xab, 0xc3, 0x0e,
		0xf1, 0xbd, 0x94, 0x7f, 0x48, 0xe0, 0x93,
		0xaa, 0xd8, 0x40, 0x5d, 0xb1, 0xd2, 0x68,
	}, true)

	c.Assert(q.x, DeepEquals, &bigNumber{
		0x034365c8, 0x06b2a874,
		0x0eb875d7, 0x0ae4c7a7,
		0x0785df04, 0x09929351,
		0x01fe8c3b, 0x0f2a0e5f,
		0x0111d39c, 0x07ab52ba,
		0x01df4552, 0x01d87566,
		0x0f297be2, 0x027c090f,
		0x0a81b155, 0x0d1a562b,
	})
	c.Assert(q.y, DeepEquals, &bigNumber{
		0x00da9708, 0x0e7d583e,
		0x0dbcc099, 0x0d2dad89,
		0x05a49ce4, 0x01cb4ddc,
		0x0928d395, 0x0098d91d,
		0x0bff16ce, 0x06f02f9a,
		0x0ce27cc1, 0x0dab5783,
		0x0b553d94, 0x03251a0c,
		0x064d70fb, 0x07fe3a2f,
	})
	c.Assert(q.z, DeepEquals, &bigNumber{
		0x0d5237cc, 0x0319d105,
		0x02ab2df5, 0x022e9736,
		0x0d79742f, 0x00688712,
		0x012d3a65, 0x0ef4925e,
		0x0bd0d260, 0x0832b532,
		0x05faef27, 0x01ffe567,
		0x0161ce73, 0x07bda0f5,
		0x035d04f1, 0x0930f532,
	})
	c.Assert(q.t, DeepEquals, &bigNumber{
		0x01f6cc27, 0x09be7b8a,
		0x0226da79, 0x0f6202f1,
		0x0e7264dc, 0x0d25aeb1,
		0x06c81f07, 0x03c32cdc,
		0x0923c854, 0x0cfc9865,
		0x055b2fed, 0x05bdcc90,
		0x01a99835, 0x0ea08056,
		0x0abbf763, 0x03826c2f,
	})
	c.Assert(ok, Equals, decafTrue)
}
