//+build amd64

package ed448

import (
	. "gopkg.in/check.v1"
)

func (s *Ed448Suite) TestDeserialize(c *C) {
	ser := serialized{0x1}
	n, ok := deserialize(ser)

	c.Assert(n, DeepEquals, &bigNumber{1})
	c.Assert(ok, Equals, true)

	ser = serialized{
		0xf5, 0x81, 0x74, 0xd5, 0x7a, 0x33, 0x72,
		0x36, 0x3c, 0x0d, 0x9f, 0xcf, 0xaa, 0x3d,
		0xc1, 0x8b, 0x1e, 0xff, 0x7e, 0x89, 0xbf,
		0x76, 0x78, 0x63, 0x65, 0x80, 0xd1, 0x7d,
		0xd8, 0x4a, 0x87, 0x3b, 0x14, 0xb9, 0xc0,
		0xe1, 0x68, 0x0b, 0xbd, 0xc8, 0x76, 0x47,
		0xf3, 0xc3, 0x82, 0x90, 0x2d, 0x2f, 0x58,
		0xd2, 0x75, 0x4b, 0x39, 0xbc, 0xa8, 0x74,
	}

	n, ok = deserialize(ser)

	c.Assert(n, DeepEquals, &bigNumber{
		0x72337ad57481f5,
		0x3daacf9f0d3c36,
		0xbf897eff1e8bc1,
		0x7dd18065637876,
		0xc0b9143b874ad8,
		0x4776c8bd0b68e1,
		0x582f2d9082c3f3,
		0x74a8bc394b75d2,
	})
	c.Assert(ok, Equals, true)

	ser = serialized{
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	}

	n, ok = deserialize(ser)
	c.Assert(n, DeepEquals, &bigNumber{
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
		0xfffffffffffffe,
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
	})
	c.Assert(ok, Equals, false)
}

func (s *Ed448Suite) TestConstantTimeGreaterOrEqualP(c *C) {
	//p (little-endian)
	p := &bigNumber{
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
		0xfffffffffffffe,
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
	}

	greaterThanP := &bigNumber{
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
	}

	lesserThanP := &bigNumber{
		0xfffffffffffffe,
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
		0xfffffffffffffe,
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
	}

	c.Assert(constantTimeGreaterOrEqualP(p), Equals, true)
	c.Assert(constantTimeGreaterOrEqualP(greaterThanP), Equals, true)
	c.Assert(constantTimeGreaterOrEqualP(lesserThanP), Equals, false)
}

func (s *Ed448Suite) TestSerialize(c *C) {
	dst := [56]byte{}

	one := &bigNumber{0x01}
	serialize(dst[:], one)
	c.Assert(dst, DeepEquals, [56]byte{1})

	p := &bigNumber{
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
		0xfffffffffffffe,
		0xffffffffffffff,
		0xffffffffffffff,
		0xffffffffffffff,
	}

	serialize(dst[:], p)
	c.Assert(dst, DeepEquals, [56]byte{
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	})
}
