package ed448

import (
	. "gopkg.in/check.v1"
)

func (s *Ed448Suite) TestStrongReduce(c *C) {
	p, _ := deserialize(serialized{
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	})

	//p = p mod p = 0
	p.strongReduce()

	c.Assert(p, DeepEquals, &bigNumber{})

	n := mustDeserialize(serialized{
		0xf5, 0x81, 0x74, 0xd5, 0x7a, 0x33, 0x72,
		0x36, 0x3c, 0x0d, 0x9f, 0xcf, 0xaa, 0x3d,
		0xc1, 0x8b, 0x1e, 0xff, 0x7e, 0x89, 0xbf,
		0x76, 0x78, 0x63, 0x65, 0x80, 0xd1, 0x7d,
		0xd8, 0x4a, 0x87, 0x3b, 0x14, 0xb9, 0xc0,
		0xe1, 0x68, 0x0b, 0xbd, 0xc8, 0x76, 0x47,
		0xf3, 0xc3, 0x82, 0x90, 0x2d, 0x2f, 0x58,
		0xd2, 0x75, 0x4b, 0x39, 0xbc, 0xa8, 0x74,
	})

	n.strongReduce()

	c.Assert(n, DeepEquals, mustDeserialize(serialized{
		0xf5, 0x81, 0x74, 0xd5, 0x7a, 0x33, 0x72,
		0x36, 0x3c, 0x0d, 0x9f, 0xcf, 0xaa, 0x3d,
		0xc1, 0x8b, 0x1e, 0xff, 0x7e, 0x89, 0xbf,
		0x76, 0x78, 0x63, 0x65, 0x80, 0xd1, 0x7d,
		0xd8, 0x4a, 0x87, 0x3b, 0x14, 0xb9, 0xc0,
		0xe1, 0x68, 0x0b, 0xbd, 0xc8, 0x76, 0x47,
		0xf3, 0xc3, 0x82, 0x90, 0x2d, 0x2f, 0x58,
		0xd2, 0x75, 0x4b, 0x39, 0xbc, 0xa8, 0x74,
	}))
}

func (s *Ed448Suite) TestSumRadix(c *C) {
	x := mustDeserialize(serialized{0x57})
	y := mustDeserialize(serialized{0x83})
	z := mustDeserialize(serialized{0xda})
	c.Assert(sumRadix(x, y), DeepEquals, z)

	x = mustDeserialize(serialized{0xff, 0xff, 0xff, 0xf0})
	y = mustDeserialize(serialized{0x01})
	z = mustDeserialize(serialized{0x00, 0x00, 0x00, 0xf1})
	c.Assert(sumRadix(x, y), DeepEquals, z)
}

func (s *Ed448Suite) TestSubRadix(c *C) {
	x := mustDeserialize(serialized{0x57})
	y := mustDeserialize(serialized{0x83})
	z := mustDeserialize(serialized{0xda})
	c.Assert(subRadix(z, y).strongReduce(), DeepEquals, x)

	x = mustDeserialize(serialized{0xff, 0xff, 0xff, 0xf0})
	y = mustDeserialize(serialized{0x01})
	z = mustDeserialize(serialized{0x00, 0x00, 0x00, 0xf1})
	c.Assert(subRadix(z, y).strongReduce(), DeepEquals, x)
}

func (s *Ed448Suite) TestEquals(c *C) {
	p, _ := deserialize(serialized{
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	})

	c.Assert(p.equals(p), Equals, true)

	x := mustDeserialize(serialized{0x01, 0x01})
	y := mustDeserialize(serialized{0x01, 0x02})
	c.Assert(x.equals(y), Equals, false)
}

func (s *Ed448Suite) TestZero(c *C) {
	notZero := mustDeserialize(serialized{0x01})
	c.Assert(notZero.zero(), Equals, false)

	zero := mustDeserialize(serialized{0x00})
	c.Assert(zero.zero(), Equals, true)
}
